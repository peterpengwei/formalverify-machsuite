// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="workload,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7v585tffg1761-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.093000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=0,HLS_SYN_FF=1927,HLS_SYN_LUT=5300}" *)

module workload (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 32'd1;
parameter    ap_ST_fsm_state2 = 32'd2;
parameter    ap_ST_fsm_state3 = 32'd4;
parameter    ap_ST_fsm_state4 = 32'd8;
parameter    ap_ST_fsm_state5 = 32'd16;
parameter    ap_ST_fsm_state6 = 32'd32;
parameter    ap_ST_fsm_state7 = 32'd64;
parameter    ap_ST_fsm_state8 = 32'd128;
parameter    ap_ST_fsm_pp0_stage0 = 32'd256;
parameter    ap_ST_fsm_state12 = 32'd512;
parameter    ap_ST_fsm_pp1_stage0 = 32'd1024;
parameter    ap_ST_fsm_state15 = 32'd2048;
parameter    ap_ST_fsm_state16 = 32'd4096;
parameter    ap_ST_fsm_state17 = 32'd8192;
parameter    ap_ST_fsm_state18 = 32'd16384;
parameter    ap_ST_fsm_state19 = 32'd32768;
parameter    ap_ST_fsm_state20 = 32'd65536;
parameter    ap_ST_fsm_state21 = 32'd131072;
parameter    ap_ST_fsm_state22 = 32'd262144;
parameter    ap_ST_fsm_state23 = 32'd524288;
parameter    ap_ST_fsm_pp2_stage0 = 32'd1048576;
parameter    ap_ST_fsm_state27 = 32'd2097152;
parameter    ap_ST_fsm_state28 = 32'd4194304;
parameter    ap_ST_fsm_state29 = 32'd8388608;
parameter    ap_ST_fsm_state30 = 32'd16777216;
parameter    ap_ST_fsm_state31 = 32'd33554432;
parameter    ap_ST_fsm_pp3_stage0 = 32'd67108864;
parameter    ap_ST_fsm_state35 = 32'd134217728;
parameter    ap_ST_fsm_state36 = 32'd268435456;
parameter    ap_ST_fsm_state37 = 32'd536870912;
parameter    ap_ST_fsm_state38 = 32'd1073741824;
parameter    ap_ST_fsm_state39 = 32'd2147483648;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [31:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] key;
wire   [31:0] data;
wire   [31:0] size;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond7_reg_796;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] exitcond_flatten_reg_854;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state30;
wire   [0:0] tmp_17_fu_671_p3;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp3_iter2;
wire    ap_block_pp3_stage0;
reg   [0:0] exitcond_flatten8_reg_905;
reg   [0:0] ap_reg_pp3_iter1_exitcond_flatten8_reg_905;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state39;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [31:0] gmem_ARADDR;
reg   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [7:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [5:0] indvar_reg_290;
reg   [5:0] j_reg_301;
reg   [12:0] indvar_flatten_reg_323;
reg   [1:0] j_1_reg_334;
reg   [11:0] indvar1_reg_345;
reg   [12:0] indvar_flatten6_reg_380;
reg   [1:0] j_3_reg_391;
reg   [11:0] indvar2_reg_402;
reg   [31:0] size_read_reg_774;
reg   [31:0] data_read_reg_780;
reg   [31:0] gmem_addr_reg_785;
wire  signed [33:0] tmp_2_cast_fu_434_p1;
reg  signed [33:0] tmp_2_cast_reg_791;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond7_fu_437_p2;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter1_exitcond7_reg_796;
wire   [5:0] indvar_next_fu_443_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [4:0] tmp_fu_449_p1;
reg   [4:0] tmp_reg_805;
reg   [4:0] ap_reg_pp0_iter1_tmp_reg_805;
reg   [7:0] gmem_addr_read_reg_810;
wire   [0:0] exitcond5_fu_457_p2;
reg   [0:0] exitcond5_reg_815;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state13_pp1_stage0_iter0;
wire    ap_block_state14_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [5:0] j_2_fu_463_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [63:0] tmp_6_fu_469_p1;
reg   [63:0] tmp_6_reg_824;
wire   [20:0] num_batches_fu_526_p3;
reg   [20:0] num_batches_reg_834;
wire    ap_CS_fsm_state15;
wire   [19:0] i_fu_543_p2;
reg   [19:0] i_reg_842;
wire    ap_CS_fsm_state16;
reg   [31:0] gmem_addr_1_reg_847;
wire   [0:0] tmp_8_fu_538_p2;
wire   [0:0] exitcond_flatten_fu_576_p2;
wire    ap_block_state24_pp2_stage0_iter0;
reg    ap_block_state25_pp2_stage0_iter1;
wire    ap_block_state26_pp2_stage0_iter2;
reg    ap_block_pp2_stage0_11001;
wire   [12:0] indvar_flatten_next_fu_582_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [1:0] tmp_mid2_v_v_fu_608_p3;
reg   [1:0] tmp_mid2_v_v_reg_863;
wire   [11:0] indvar_next1_fu_628_p2;
wire   [10:0] tmp_12_fu_634_p1;
reg   [10:0] tmp_12_reg_873;
reg   [10:0] ap_reg_pp2_iter1_tmp_12_reg_873;
reg   [0:0] tmp_15_reg_878;
reg   [0:0] ap_reg_pp2_iter1_tmp_15_reg_878;
reg   [7:0] gmem_addr_1_read_reg_882;
wire   [11:0] k_fu_665_p2;
reg   [11:0] k_reg_891;
wire    ap_CS_fsm_state28;
wire   [0:0] tmp_16_fu_657_p3;
reg    ap_sig_ioackin_gmem_AWREADY;
reg    ap_block_state30_io;
wire   [11:0] k_1_fu_679_p2;
reg   [11:0] k_1_reg_900;
wire   [0:0] exitcond_flatten8_fu_685_p2;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state32_pp3_stage0_iter0;
wire    ap_block_state33_pp3_stage0_iter1;
wire    ap_block_state34_pp3_stage0_iter2;
reg    ap_sig_ioackin_gmem_WREADY;
reg    ap_block_state34_io;
reg    ap_block_pp3_stage0_11001;
wire   [12:0] indvar_flatten_next7_fu_691_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [1:0] tmp_30_mid2_v_v_fu_717_p3;
reg   [1:0] tmp_30_mid2_v_v_reg_914;
wire   [11:0] indvar_next2_fu_737_p2;
reg   [0:0] tmp_22_reg_924;
wire   [7:0] buf_load_phi_fu_767_p3;
reg   [7:0] buf_load_phi_reg_939;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state12;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state13;
reg    ap_enable_reg_pp1_iter1;
wire    ap_CS_fsm_state23;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state24;
reg    ap_enable_reg_pp2_iter2;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state32;
reg    ap_enable_reg_pp3_iter1;
reg   [4:0] local_key_0_address0;
reg    local_key_0_ce0;
reg    local_key_0_we0;
wire   [7:0] local_key_0_q0;
reg   [4:0] local_key_1_address0;
reg    local_key_1_ce0;
reg    local_key_1_we0;
wire   [7:0] local_key_1_q0;
reg   [10:0] buf_0_address0;
reg    buf_0_ce0;
reg    buf_0_we0;
reg   [7:0] buf_0_d0;
wire   [7:0] buf_0_q0;
reg    buf_0_ce1;
reg    buf_0_we1;
wire   [7:0] buf_0_q1;
reg   [10:0] buf_1_address0;
reg    buf_1_ce0;
reg    buf_1_we0;
reg   [7:0] buf_1_d0;
wire   [7:0] buf_1_q0;
reg    buf_1_ce1;
reg    buf_1_we1;
wire   [7:0] buf_1_q1;
wire    grp_aes256_encrypt_ecb_fu_413_ap_start;
wire    grp_aes256_encrypt_ecb_fu_413_ap_done;
wire    grp_aes256_encrypt_ecb_fu_413_ap_idle;
wire    grp_aes256_encrypt_ecb_fu_413_ap_ready;
wire   [4:0] grp_aes256_encrypt_ecb_fu_413_k_address0;
wire    grp_aes256_encrypt_ecb_fu_413_k_ce0;
reg   [7:0] grp_aes256_encrypt_ecb_fu_413_k_q0;
wire   [10:0] grp_aes256_encrypt_ecb_fu_413_buf_r_address0;
wire    grp_aes256_encrypt_ecb_fu_413_buf_r_ce0;
wire    grp_aes256_encrypt_ecb_fu_413_buf_r_we0;
wire   [7:0] grp_aes256_encrypt_ecb_fu_413_buf_r_d0;
reg   [7:0] grp_aes256_encrypt_ecb_fu_413_buf_r_q0;
wire   [10:0] grp_aes256_encrypt_ecb_fu_413_buf_r_address1;
wire    grp_aes256_encrypt_ecb_fu_413_buf_r_ce1;
wire    grp_aes256_encrypt_ecb_fu_413_buf_r_we1;
wire   [7:0] grp_aes256_encrypt_ecb_fu_413_buf_r_d1;
reg   [7:0] grp_aes256_encrypt_ecb_fu_413_buf_r_q1;
reg   [11:0] grp_aes256_encrypt_ecb_fu_413_buf_offset2;
reg   [19:0] i_1_reg_312;
reg   [1:0] ap_phi_mux_j_1_phi_fu_338_p4;
reg   [11:0] k_i_reg_356;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state27;
reg   [11:0] k_i1_reg_368;
wire    ap_CS_fsm_state31;
reg   [1:0] ap_phi_mux_j_3_phi_fu_395_p4;
reg    ap_reg_grp_aes256_encrypt_ecb_fu_413_ap_start;
wire   [63:0] tmp_4_fu_453_p1;
wire    ap_block_pp1_stage0;
wire   [63:0] tmp_14_fu_652_p1;
wire   [63:0] tmp_20_fu_753_p1;
wire  signed [63:0] tmp_7_fu_424_p1;
wire  signed [63:0] data4_sum_cast_fu_566_p1;
reg    ap_reg_ioackin_gmem_ARREADY;
reg    ap_sig_ioackin_gmem_ARREADY;
reg    ap_reg_ioackin_gmem_AWREADY;
reg    ap_reg_ioackin_gmem_WREADY;
wire    ap_block_pp3_stage0_01001;
wire   [31:0] tmp_5_fu_474_p2;
wire   [31:0] p_neg_fu_487_p2;
wire   [19:0] tmp_9_fu_492_p4;
wire   [20:0] p_lshr_cast_fu_502_p1;
wire   [19:0] tmp_10_fu_512_p4;
wire   [0:0] tmp_2_fu_479_p3;
wire   [20:0] p_neg_t_fu_506_p2;
wire   [20:0] p_lshr_f_cast_fu_522_p1;
wire   [20:0] i_1_cast_fu_534_p1;
wire   [31:0] tmp_s_fu_549_p3;
wire   [33:0] tmp_10_cast_fu_557_p1;
wire   [33:0] data4_sum_fu_561_p2;
wire   [0:0] exitcond_fu_588_p2;
wire   [1:0] j_s_fu_602_p2;
wire   [0:0] tmp_11_fu_616_p1;
wire   [11:0] indvar1_mid2_fu_594_p3;
wire   [11:0] tmp_mid2_fu_620_p3;
wire   [11:0] tmp_13_fu_638_p2;
wire   [0:0] exitcond1_fu_697_p2;
wire   [1:0] j_4_fu_711_p2;
wire   [0:0] tmp_18_fu_725_p1;
wire   [11:0] indvar2_mid2_fu_703_p3;
wire   [11:0] tmp_30_mid2_fu_729_p3;
wire   [10:0] tmp_21_fu_743_p1;
wire   [11:0] tmp_19_fu_747_p2;
reg   [31:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;

// power-on initialization
initial begin
#0 ap_CS_fsm = 32'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_reg_grp_aes256_encrypt_ecb_fu_413_ap_start = 1'b0;
#0 ap_reg_ioackin_gmem_ARREADY = 1'b0;
#0 ap_reg_ioackin_gmem_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem_WREADY = 1'b0;
end

workload_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
workload_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .key(key),
    .data(data),
    .size(size)
);

workload_gmem_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
workload_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(gmem_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_1_reg_847),
    .I_AWID(1'd0),
    .I_AWLEN(32'd4096),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(buf_load_phi_reg_939),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd1),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

aes256_encrypt_eceOg #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
local_key_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(local_key_0_address0),
    .ce0(local_key_0_ce0),
    .we0(local_key_0_we0),
    .d0(gmem_addr_read_reg_810),
    .q0(local_key_0_q0)
);

aes256_encrypt_eceOg #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
local_key_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(local_key_1_address0),
    .ce0(local_key_1_ce0),
    .we0(local_key_1_we0),
    .d0(local_key_0_q0),
    .q0(local_key_1_q0)
);

workload_buf_0 #(
    .DataWidth( 8 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
buf_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buf_0_address0),
    .ce0(buf_0_ce0),
    .we0(buf_0_we0),
    .d0(buf_0_d0),
    .q0(buf_0_q0),
    .address1(grp_aes256_encrypt_ecb_fu_413_buf_r_address1),
    .ce1(buf_0_ce1),
    .we1(buf_0_we1),
    .d1(grp_aes256_encrypt_ecb_fu_413_buf_r_d1),
    .q1(buf_0_q1)
);

workload_buf_0 #(
    .DataWidth( 8 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
buf_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buf_1_address0),
    .ce0(buf_1_ce0),
    .we0(buf_1_we0),
    .d0(buf_1_d0),
    .q0(buf_1_q0),
    .address1(grp_aes256_encrypt_ecb_fu_413_buf_r_address1),
    .ce1(buf_1_ce1),
    .we1(buf_1_we1),
    .d1(grp_aes256_encrypt_ecb_fu_413_buf_r_d1),
    .q1(buf_1_q1)
);

aes256_encrypt_ecb grp_aes256_encrypt_ecb_fu_413(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aes256_encrypt_ecb_fu_413_ap_start),
    .ap_done(grp_aes256_encrypt_ecb_fu_413_ap_done),
    .ap_idle(grp_aes256_encrypt_ecb_fu_413_ap_idle),
    .ap_ready(grp_aes256_encrypt_ecb_fu_413_ap_ready),
    .k_address0(grp_aes256_encrypt_ecb_fu_413_k_address0),
    .k_ce0(grp_aes256_encrypt_ecb_fu_413_k_ce0),
    .k_q0(grp_aes256_encrypt_ecb_fu_413_k_q0),
    .buf_r_address0(grp_aes256_encrypt_ecb_fu_413_buf_r_address0),
    .buf_r_ce0(grp_aes256_encrypt_ecb_fu_413_buf_r_ce0),
    .buf_r_we0(grp_aes256_encrypt_ecb_fu_413_buf_r_we0),
    .buf_r_d0(grp_aes256_encrypt_ecb_fu_413_buf_r_d0),
    .buf_r_q0(grp_aes256_encrypt_ecb_fu_413_buf_r_q0),
    .buf_r_address1(grp_aes256_encrypt_ecb_fu_413_buf_r_address1),
    .buf_r_ce1(grp_aes256_encrypt_ecb_fu_413_buf_r_ce1),
    .buf_r_we1(grp_aes256_encrypt_ecb_fu_413_buf_r_we1),
    .buf_r_d1(grp_aes256_encrypt_ecb_fu_413_buf_r_d1),
    .buf_r_q1(grp_aes256_encrypt_ecb_fu_413_buf_r_q1),
    .buf_offset2(grp_aes256_encrypt_ecb_fu_413_buf_offset2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state13) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state13))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state13);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state24) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state23)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state24)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state24);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state23)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state32) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((1'b0 == ap_block_state30_io) & (1'b1 == ap_CS_fsm_state30) & (tmp_17_fu_671_p3 == 1'd1))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state32)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state32);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if (((1'b0 == ap_block_state30_io) & (1'b1 == ap_CS_fsm_state30) & (tmp_17_fu_671_p3 == 1'd1))) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_aes256_encrypt_ecb_fu_413_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state28) & (tmp_16_fu_657_p3 == 1'd0)) | ((1'b0 == ap_block_state30_io) & (1'b1 == ap_CS_fsm_state30) & (tmp_17_fu_671_p3 == 1'd0)))) begin
            ap_reg_grp_aes256_encrypt_ecb_fu_413_ap_start <= 1'b1;
        end else if ((grp_aes256_encrypt_ecb_fu_413_ap_ready == 1'b1)) begin
            ap_reg_grp_aes256_encrypt_ecb_fu_413_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_ARREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b0;
        end else if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_AWREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state30) & (tmp_17_fu_671_p3 == 1'd1))) begin
            if ((1'b0 == ap_block_state30_io)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b0;
            end else if ((gmem_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_WREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp3_iter2 == 1'b1) & (ap_reg_pp3_iter1_exitcond_flatten8_reg_905 == 1'd0))) begin
            if ((1'b0 == ap_block_pp3_stage0_11001)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp3_stage0_01001) & (gmem_WREADY == 1'b1))) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
        i_1_reg_312 <= i_reg_842;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        i_1_reg_312 <= 20'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond_flatten_fu_576_p2 == 1'd0))) begin
        indvar1_reg_345 <= indvar_next1_fu_628_p2;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        indvar1_reg_345 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state30_io) & (1'b1 == ap_CS_fsm_state30) & (tmp_17_fu_671_p3 == 1'd1))) begin
        indvar2_reg_402 <= 12'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten8_fu_685_p2 == 1'd0))) begin
        indvar2_reg_402 <= indvar_next2_fu_737_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state30_io) & (1'b1 == ap_CS_fsm_state30) & (tmp_17_fu_671_p3 == 1'd1))) begin
        indvar_flatten6_reg_380 <= 13'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten8_fu_685_p2 == 1'd0))) begin
        indvar_flatten6_reg_380 <= indvar_flatten_next7_fu_691_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond_flatten_fu_576_p2 == 1'd0))) begin
        indvar_flatten_reg_323 <= indvar_flatten_next_fu_582_p2;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        indvar_flatten_reg_323 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond7_fu_437_p2 == 1'd0))) begin
        indvar_reg_290 <= indvar_next_fu_443_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_reg_290 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond_flatten_reg_854 == 1'd0))) begin
        j_1_reg_334 <= tmp_mid2_v_v_reg_863;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        j_1_reg_334 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state30_io) & (1'b1 == ap_CS_fsm_state30) & (tmp_17_fu_671_p3 == 1'd1))) begin
        j_3_reg_391 <= 2'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten8_reg_905 == 1'd0))) begin
        j_3_reg_391 <= tmp_30_mid2_v_v_reg_914;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        j_reg_301 <= 6'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond5_fu_457_p2 == 1'd0))) begin
        j_reg_301 <= j_2_fu_463_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (tmp_16_fu_657_p3 == 1'd1))) begin
        k_i1_reg_368 <= 12'd0;
    end else if (((grp_aes256_encrypt_ecb_fu_413_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
        k_i1_reg_368 <= k_1_reg_900;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        k_i_reg_356 <= 12'd0;
    end else if (((grp_aes256_encrypt_ecb_fu_413_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
        k_i_reg_356 <= k_reg_891;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_exitcond7_reg_796 <= exitcond7_reg_796;
        ap_reg_pp0_iter1_tmp_reg_805 <= tmp_reg_805;
        exitcond7_reg_796 <= exitcond7_fu_437_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_reg_pp2_iter1_tmp_12_reg_873 <= tmp_12_reg_873;
        ap_reg_pp2_iter1_tmp_15_reg_878 <= tmp_15_reg_878;
        exitcond_flatten_reg_854 <= exitcond_flatten_fu_576_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        ap_reg_pp3_iter1_exitcond_flatten8_reg_905 <= exitcond_flatten8_reg_905;
        exitcond_flatten8_reg_905 <= exitcond_flatten8_fu_685_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten8_reg_905 == 1'd0))) begin
        buf_load_phi_reg_939 <= buf_load_phi_fu_767_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        data_read_reg_780 <= data;
        gmem_addr_reg_785 <= tmp_7_fu_424_p1;
        size_read_reg_774 <= size;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond5_reg_815 <= exitcond5_fu_457_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond_flatten_reg_854 == 1'd0))) begin
        gmem_addr_1_read_reg_882 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (tmp_8_fu_538_p2 == 1'd1))) begin
        gmem_addr_1_reg_847 <= data4_sum_cast_fu_566_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond7_reg_796 == 1'd0))) begin
        gmem_addr_read_reg_810 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        i_reg_842 <= i_fu_543_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state30_io) & (1'b1 == ap_CS_fsm_state30) & (tmp_17_fu_671_p3 == 1'd0))) begin
        k_1_reg_900 <= k_1_fu_679_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (tmp_16_fu_657_p3 == 1'd0))) begin
        k_reg_891 <= k_fu_665_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        num_batches_reg_834 <= num_batches_fu_526_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond_flatten_fu_576_p2 == 1'd0))) begin
        tmp_12_reg_873 <= tmp_12_fu_634_p1;
        tmp_15_reg_878 <= tmp_13_fu_638_p2[32'd11];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten8_fu_685_p2 == 1'd0))) begin
        tmp_22_reg_924 <= tmp_19_fu_747_p2[32'd11];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_2_cast_reg_791 <= tmp_2_cast_fu_434_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (exitcond_flatten8_fu_685_p2 == 1'd0))) begin
        tmp_30_mid2_v_v_reg_914 <= tmp_30_mid2_v_v_fu_717_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond5_fu_457_p2 == 1'd0))) begin
        tmp_6_reg_824[5 : 0] <= tmp_6_fu_469_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond_flatten_fu_576_p2 == 1'd0))) begin
        tmp_mid2_v_v_reg_863 <= tmp_mid2_v_v_fu_608_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond7_fu_437_p2 == 1'd0))) begin
        tmp_reg_805 <= tmp_fu_449_p1;
    end
end

always @ (*) begin
    if ((exitcond7_fu_437_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond5_fu_457_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state13 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state13 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_576_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state24 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state24 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten8_fu_685_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state32 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state32 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) & (tmp_8_fu_538_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0) & (exitcond_flatten_reg_854 == 1'd0))) begin
        ap_phi_mux_j_1_phi_fu_338_p4 = tmp_mid2_v_v_reg_863;
    end else begin
        ap_phi_mux_j_1_phi_fu_338_p4 = j_1_reg_334;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0) & (exitcond_flatten8_reg_905 == 1'd0))) begin
        ap_phi_mux_j_3_phi_fu_395_p4 = tmp_30_mid2_v_v_reg_914;
    end else begin
        ap_phi_mux_j_3_phi_fu_395_p4 = j_3_reg_391;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) & (tmp_8_fu_538_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_AWREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY;
    end else begin
        ap_sig_ioackin_gmem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_WREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY;
    end else begin
        ap_sig_ioackin_gmem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        buf_0_address0 = tmp_20_fu_753_p1;
    end else if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        buf_0_address0 = tmp_14_fu_652_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        buf_0_address0 = grp_aes256_encrypt_ecb_fu_413_buf_r_address0;
    end else begin
        buf_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
        buf_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        buf_0_ce0 = grp_aes256_encrypt_ecb_fu_413_buf_r_ce0;
    end else begin
        buf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        buf_0_ce1 = grp_aes256_encrypt_ecb_fu_413_buf_r_ce1;
    end else begin
        buf_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        buf_0_d0 = gmem_addr_1_read_reg_882;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        buf_0_d0 = grp_aes256_encrypt_ecb_fu_413_buf_r_d0;
    end else begin
        buf_0_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1) & (ap_reg_pp2_iter1_tmp_15_reg_878 == 1'd0))) begin
        buf_0_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        buf_0_we0 = grp_aes256_encrypt_ecb_fu_413_buf_r_we0;
    end else begin
        buf_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        buf_0_we1 = grp_aes256_encrypt_ecb_fu_413_buf_r_we1;
    end else begin
        buf_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        buf_1_address0 = tmp_20_fu_753_p1;
    end else if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        buf_1_address0 = tmp_14_fu_652_p1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        buf_1_address0 = grp_aes256_encrypt_ecb_fu_413_buf_r_address0;
    end else begin
        buf_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1)))) begin
        buf_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        buf_1_ce0 = grp_aes256_encrypt_ecb_fu_413_buf_r_ce0;
    end else begin
        buf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        buf_1_ce1 = grp_aes256_encrypt_ecb_fu_413_buf_r_ce1;
    end else begin
        buf_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        buf_1_d0 = gmem_addr_1_read_reg_882;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        buf_1_d0 = grp_aes256_encrypt_ecb_fu_413_buf_r_d0;
    end else begin
        buf_1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1) & (ap_reg_pp2_iter1_tmp_15_reg_878 == 1'd1))) begin
        buf_1_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        buf_1_we0 = grp_aes256_encrypt_ecb_fu_413_buf_r_we0;
    end else begin
        buf_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        buf_1_we1 = grp_aes256_encrypt_ecb_fu_413_buf_r_we1;
    end else begin
        buf_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state17)) begin
            gmem_ARADDR = gmem_addr_1_reg_847;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            gmem_ARADDR = gmem_addr_reg_785;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_ARREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state17)) begin
            gmem_ARLEN = 32'd4096;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            gmem_ARLEN = 32'd32;
        end else begin
            gmem_ARLEN = 'bx;
        end
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state17)) | ((ap_reg_ioackin_gmem_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state30) & (tmp_17_fu_671_p3 == 1'd1))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (exitcond_flatten_reg_854 == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond7_reg_796 == 1'd0)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_01001) & (ap_reg_ioackin_gmem_WREADY == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (ap_reg_pp3_iter1_exitcond_flatten8_reg_905 == 1'd0))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state2))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) & (tmp_17_fu_671_p3 == 1'd1))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0) & (exitcond_flatten_reg_854 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond7_reg_796 == 1'd0) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0) & (ap_reg_pp3_iter1_exitcond_flatten8_reg_905 == 1'd0))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_aes256_encrypt_ecb_fu_413_buf_offset2 = k_i1_reg_368;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_aes256_encrypt_ecb_fu_413_buf_offset2 = k_i_reg_356;
    end else begin
        grp_aes256_encrypt_ecb_fu_413_buf_offset2 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_aes256_encrypt_ecb_fu_413_buf_r_q0 = buf_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_aes256_encrypt_ecb_fu_413_buf_r_q0 = buf_0_q0;
    end else begin
        grp_aes256_encrypt_ecb_fu_413_buf_r_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_aes256_encrypt_ecb_fu_413_buf_r_q1 = buf_1_q1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_aes256_encrypt_ecb_fu_413_buf_r_q1 = buf_0_q1;
    end else begin
        grp_aes256_encrypt_ecb_fu_413_buf_r_q1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_aes256_encrypt_ecb_fu_413_k_q0 = local_key_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_aes256_encrypt_ecb_fu_413_k_q0 = local_key_0_q0;
    end else begin
        grp_aes256_encrypt_ecb_fu_413_k_q0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        local_key_0_address0 = tmp_6_fu_469_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        local_key_0_address0 = tmp_4_fu_453_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        local_key_0_address0 = grp_aes256_encrypt_ecb_fu_413_k_address0;
    end else begin
        local_key_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        local_key_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        local_key_0_ce0 = grp_aes256_encrypt_ecb_fu_413_k_ce0;
    end else begin
        local_key_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_reg_pp0_iter1_exitcond7_reg_796 == 1'd0))) begin
        local_key_0_we0 = 1'b1;
    end else begin
        local_key_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        local_key_1_address0 = tmp_6_reg_824;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        local_key_1_address0 = grp_aes256_encrypt_ecb_fu_413_k_address0;
    end else begin
        local_key_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        local_key_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        local_key_1_ce0 = grp_aes256_encrypt_ecb_fu_413_k_ce0;
    end else begin
        local_key_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond5_reg_815 == 1'd0))) begin
        local_key_1_we0 = 1'b1;
    end else begin
        local_key_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond7_fu_437_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond7_fu_437_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond5_fu_457_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond5_fu_457_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (tmp_8_fu_538_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((ap_sig_ioackin_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (exitcond_flatten_fu_576_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (exitcond_flatten_fu_576_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (tmp_16_fu_657_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((grp_aes256_encrypt_ecb_fu_413_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((1'b0 == ap_block_state30_io) & (1'b1 == ap_CS_fsm_state30) & (tmp_17_fu_671_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((1'b0 == ap_block_state30_io) & (1'b1 == ap_CS_fsm_state30) & (tmp_17_fu_671_p3 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((grp_aes256_encrypt_ecb_fu_413_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten8_fu_685_p2 == 1'd1)) & ~((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter0 == 1'b1) & (exitcond_flatten8_fu_685_p2 == 1'd1)) | ((ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond7_reg_796 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (exitcond7_reg_796 == 1'd0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (exitcond_flatten_reg_854 == 1'd0));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((gmem_RVALID == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (exitcond_flatten_reg_854 == 1'd0));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((1'b1 == ap_block_state34_io) & (ap_enable_reg_pp3_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((1'b1 == ap_block_state34_io) & (ap_enable_reg_pp3_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((gmem_RVALID == 1'b0) & (exitcond7_reg_796 == 1'd0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state25_pp2_stage0_iter1 = ((gmem_RVALID == 1'b0) & (exitcond_flatten_reg_854 == 1'd0));
end

assign ap_block_state26_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state30_io = ((ap_sig_ioackin_gmem_AWREADY == 1'b0) & (tmp_17_fu_671_p3 == 1'd1));
end

assign ap_block_state32_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state34_io = ((ap_sig_ioackin_gmem_WREADY == 1'b0) & (ap_reg_pp3_iter1_exitcond_flatten8_reg_905 == 1'd0));
end

assign ap_block_state34_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign buf_load_phi_fu_767_p3 = ((tmp_22_reg_924[0:0] === 1'b1) ? buf_1_q0 : buf_0_q0);

assign data4_sum_cast_fu_566_p1 = $signed(data4_sum_fu_561_p2);

assign data4_sum_fu_561_p2 = ($signed(tmp_10_cast_fu_557_p1) + $signed(tmp_2_cast_reg_791));

assign exitcond1_fu_697_p2 = ((indvar2_reg_402 == 12'd2048) ? 1'b1 : 1'b0);

assign exitcond5_fu_457_p2 = ((j_reg_301 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond7_fu_437_p2 = ((indvar_reg_290 == 6'd32) ? 1'b1 : 1'b0);

assign exitcond_flatten8_fu_685_p2 = ((indvar_flatten6_reg_380 == 13'd4096) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_576_p2 = ((indvar_flatten_reg_323 == 13'd4096) ? 1'b1 : 1'b0);

assign exitcond_fu_588_p2 = ((indvar1_reg_345 == 12'd2048) ? 1'b1 : 1'b0);

assign grp_aes256_encrypt_ecb_fu_413_ap_start = ap_reg_grp_aes256_encrypt_ecb_fu_413_ap_start;

assign i_1_cast_fu_534_p1 = i_1_reg_312;

assign i_fu_543_p2 = (i_1_reg_312 + 20'd1);

assign indvar1_mid2_fu_594_p3 = ((exitcond_fu_588_p2[0:0] === 1'b1) ? 12'd0 : indvar1_reg_345);

assign indvar2_mid2_fu_703_p3 = ((exitcond1_fu_697_p2[0:0] === 1'b1) ? 12'd0 : indvar2_reg_402);

assign indvar_flatten_next7_fu_691_p2 = (indvar_flatten6_reg_380 + 13'd1);

assign indvar_flatten_next_fu_582_p2 = (indvar_flatten_reg_323 + 13'd1);

assign indvar_next1_fu_628_p2 = (12'd1 + indvar1_mid2_fu_594_p3);

assign indvar_next2_fu_737_p2 = (12'd1 + indvar2_mid2_fu_703_p3);

assign indvar_next_fu_443_p2 = (indvar_reg_290 + 6'd1);

assign j_2_fu_463_p2 = (j_reg_301 + 6'd1);

assign j_4_fu_711_p2 = (2'd1 + ap_phi_mux_j_3_phi_fu_395_p4);

assign j_s_fu_602_p2 = (2'd1 + ap_phi_mux_j_1_phi_fu_338_p4);

assign k_1_fu_679_p2 = (k_i1_reg_368 + 12'd128);

assign k_fu_665_p2 = (k_i_reg_356 + 12'd128);

assign num_batches_fu_526_p3 = ((tmp_2_fu_479_p3[0:0] === 1'b1) ? p_neg_t_fu_506_p2 : p_lshr_f_cast_fu_522_p1);

assign p_lshr_cast_fu_502_p1 = tmp_9_fu_492_p4;

assign p_lshr_f_cast_fu_522_p1 = tmp_10_fu_512_p4;

assign p_neg_fu_487_p2 = ($signed(32'd4294963201) - $signed(size_read_reg_774));

assign p_neg_t_fu_506_p2 = (21'd0 - p_lshr_cast_fu_502_p1);

assign tmp_10_cast_fu_557_p1 = tmp_s_fu_549_p3;

assign tmp_10_fu_512_p4 = {{tmp_5_fu_474_p2[31:12]}};

assign tmp_11_fu_616_p1 = tmp_mid2_v_v_fu_608_p3[0:0];

assign tmp_12_fu_634_p1 = indvar1_mid2_fu_594_p3[10:0];

assign tmp_13_fu_638_p2 = (indvar1_mid2_fu_594_p3 + tmp_mid2_fu_620_p3);

assign tmp_14_fu_652_p1 = ap_reg_pp2_iter1_tmp_12_reg_873;

assign tmp_16_fu_657_p3 = k_i_reg_356[32'd11];

assign tmp_17_fu_671_p3 = k_i1_reg_368[32'd11];

assign tmp_18_fu_725_p1 = tmp_30_mid2_v_v_fu_717_p3[0:0];

assign tmp_19_fu_747_p2 = (indvar2_mid2_fu_703_p3 + tmp_30_mid2_fu_729_p3);

assign tmp_20_fu_753_p1 = tmp_21_fu_743_p1;

assign tmp_21_fu_743_p1 = indvar2_mid2_fu_703_p3[10:0];

assign tmp_2_cast_fu_434_p1 = $signed(data_read_reg_780);

assign tmp_2_fu_479_p3 = tmp_5_fu_474_p2[32'd31];

assign tmp_30_mid2_fu_729_p3 = {{tmp_18_fu_725_p1}, {11'd0}};

assign tmp_30_mid2_v_v_fu_717_p3 = ((exitcond1_fu_697_p2[0:0] === 1'b1) ? j_4_fu_711_p2 : ap_phi_mux_j_3_phi_fu_395_p4);

assign tmp_4_fu_453_p1 = ap_reg_pp0_iter1_tmp_reg_805;

assign tmp_5_fu_474_p2 = (size_read_reg_774 + 32'd4095);

assign tmp_6_fu_469_p1 = j_reg_301;

assign tmp_7_fu_424_p1 = $signed(key);

assign tmp_8_fu_538_p2 = (($signed(i_1_cast_fu_534_p1) < $signed(num_batches_reg_834)) ? 1'b1 : 1'b0);

assign tmp_9_fu_492_p4 = {{p_neg_fu_487_p2[31:12]}};

assign tmp_fu_449_p1 = indvar_reg_290[4:0];

assign tmp_mid2_fu_620_p3 = {{tmp_11_fu_616_p1}, {11'd0}};

assign tmp_mid2_v_v_fu_608_p3 = ((exitcond_fu_588_p2[0:0] === 1'b1) ? j_s_fu_602_p2 : ap_phi_mux_j_1_phi_fu_338_p4);

assign tmp_s_fu_549_p3 = {{i_1_reg_312}, {12'd0}};

always @ (posedge ap_clk) begin
    tmp_6_reg_824[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //workload
