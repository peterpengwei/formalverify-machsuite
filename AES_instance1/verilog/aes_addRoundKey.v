// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aes_addRoundKey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        buf_r_address0,
        buf_r_ce0,
        buf_r_we0,
        buf_r_d0,
        buf_r_q0,
        sum,
        key_address0,
        key_ce0,
        key_q0,
        key_offset
);


input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] buf_r_address0;
output   buf_r_ce0;
output   buf_r_we0;
output  [7:0] buf_r_d0;
input  [7:0] buf_r_q0;
input  [10:0] sum;
output  [4:0] key_address0;
output   key_ce0;
input  [7:0] key_q0;
input  [5:0] key_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg buf_r_ce0;
reg buf_r_we0;
reg key_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [4:0] i_reg_77;
wire   [4:0] tmp_80_fu_88_p1;
reg   [4:0] tmp_80_reg_141;
wire   [11:0] sum_cast_fu_92_p1;
reg   [11:0] sum_cast_reg_146;
wire   [0:0] tmp_fu_96_p2;
reg   [0:0] tmp_reg_151;
wire   [0:0] ap_CS_fsm_pp0_stage0;
wire   [4:0] i_4_fu_102_p2;
reg   [4:0] i_4_reg_155;
reg    ap_enable_reg_pp0_iter0;
wire   [4:0] sum4_fu_116_p2;
reg   [4:0] sum4_reg_160;
reg   [10:0] buf_addr_reg_165;
wire   [0:0] ap_CS_fsm_pp0_stage1;
wire   [7:0] tmp_s_fu_135_p2;
reg   [7:0] tmp_s_reg_175;
wire   [0:0] ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter1;
reg   [4:0] i_phi_fu_81_p4;
wire   [63:0] sum1_cast_fu_126_p1;
wire   [63:0] sum4_cast_fu_131_p1;
wire  signed [7:0] i_4_cast_fu_108_p1;
wire   [11:0] tmp_cast1_fu_112_p1;
wire   [11:0] sum1_fu_121_p2;
wire   [0:0] ap_CS_fsm_state6;
reg   [4:0] ap_NS_fsm;
reg    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= 5'd1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'd1 == ap_CS_fsm_pp0_stage0) & ~(tmp_fu_96_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_CS_fsm_state1 == 1'd1) & ~(1'b0 == ap_start))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((tmp_reg_151 == 1'd0) & (1'd1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((ap_CS_fsm_state1 == 1'd1) & ~(1'b0 == ap_start)) | ((1'd1 == ap_CS_fsm_pp0_stage2) & ~(tmp_reg_151 == 1'd0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_151 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_reg_77 <= i_4_reg_155;
    end else if (((ap_CS_fsm_state1 == 1'd1) & ~(1'b0 == ap_start))) begin
        i_reg_77 <= 5'd16;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & (tmp_fu_96_p2 == 1'd0))) begin
        buf_addr_reg_165 <= sum1_cast_fu_126_p1;
        sum4_reg_160 <= sum4_fu_116_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (tmp_fu_96_p2 == 1'd0))) begin
        i_4_reg_155 <= i_4_fu_102_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'd1) & ~(1'b0 == ap_start))) begin
        sum_cast_reg_146[10 : 0] <= sum_cast_fu_92_p1[10 : 0];
        tmp_80_reg_141 <= tmp_80_fu_88_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_pp0_stage0)) begin
        tmp_reg_151 <= tmp_fu_96_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_151 == 1'd0) & (1'd1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_s_reg_175 <= tmp_s_fu_135_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'd1)) | (1'd1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'd1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'd1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == ap_CS_fsm_pp0_stage1)))) begin
        buf_r_ce0 = 1'b1;
    end else begin
        buf_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_151 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        buf_r_we0 = 1'b1;
    end else begin
        buf_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & (tmp_reg_151 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_phi_fu_81_p4 = i_4_reg_155;
    end else begin
        i_phi_fu_81_p4 = i_reg_77;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == ap_CS_fsm_pp0_stage1))) begin
        key_ce0 = 1'b1;
    end else begin
        key_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        5'd1 : begin
            if (~(1'b0 == ap_start)) begin
                ap_NS_fsm = 5'd2;
            end else begin
                ap_NS_fsm = 5'd1;
            end
        end
        5'd2 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & ~(tmp_fu_96_p2 == 1'd0))) begin
                ap_NS_fsm = 5'd4;
            end else begin
                ap_NS_fsm = 5'd16;
            end
        end
        5'd4 : begin
            ap_NS_fsm = 5'd8;
        end
        5'd8 : begin
            ap_NS_fsm = 5'd2;
        end
        5'd16 : begin
            ap_NS_fsm = 5'd1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_enable_pp0 = ((ap_enable_reg_pp0_iter0 == 1'b1) | (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign buf_r_address0 = buf_addr_reg_165;

assign buf_r_d0 = tmp_s_reg_175;

assign i_4_cast_fu_108_p1 = $signed(i_4_fu_102_p2);

assign i_4_fu_102_p2 = ($signed(i_phi_fu_81_p4) + $signed(5'd31));

assign key_address0 = sum4_cast_fu_131_p1;

assign sum1_cast_fu_126_p1 = sum1_fu_121_p2;

assign sum1_fu_121_p2 = (tmp_cast1_fu_112_p1 + sum_cast_reg_146);

assign sum4_cast_fu_131_p1 = sum4_reg_160;

assign sum4_fu_116_p2 = (i_4_fu_102_p2 + tmp_80_reg_141);

assign sum_cast_fu_92_p1 = sum;

assign tmp_80_fu_88_p1 = key_offset[4:0];

assign tmp_cast1_fu_112_p1 = $unsigned(i_4_cast_fu_108_p1);

assign tmp_fu_96_p2 = ((i_phi_fu_81_p4 == 5'd0) ? 1'b1 : 1'b0);

assign tmp_s_fu_135_p2 = (buf_r_q0 ^ key_q0);

always @ (posedge ap_clk) begin
    sum_cast_reg_146[11] <= 1'b0;
end

endmodule //aes_addRoundKey
