// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="workload,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx690tffg1157-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.650000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=2148,HLS_SYN_LUT=2960}" *)

module workload (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [28:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] key;
wire   [63:0] data;
wire   [31:0] size;
reg    gmem_blk_n_AR;
wire   [0:0] ap_CS_fsm_state2;
reg    gmem_blk_n_R;
wire   [0:0] ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] exitcond5_reg_478;
wire   [0:0] ap_CS_fsm_state15;
reg    gmem_blk_n_AW;
wire   [0:0] ap_CS_fsm_state26;
wire   [0:0] tmp_13_fu_426_p3;
wire   [0:0] ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] exitcond1_reg_526;
reg    gmem_blk_n_B;
wire   [0:0] ap_CS_fsm_state35;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp2_iter2;
reg   [0:0] exitcond2_reg_549;
reg   [0:0] ap_pipeline_reg_pp2_iter1_exitcond2_reg_549;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [63:0] gmem_ARADDR;
reg   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [7:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [5:0] indvar_reg_213;
reg   [12:0] indvar1_reg_235;
reg   [12:0] indvar2_reg_258;
reg   [7:0] reg_279;
reg    ap_block_state10;
reg    ap_block_state23;
reg   [31:0] size_read_reg_461;
reg   [63:0] data_read_reg_467;
reg   [63:0] gmem_addr_reg_472;
wire   [0:0] exitcond5_fu_291_p2;
reg   [0:0] ap_pipeline_reg_pp0_iter1_exitcond5_reg_478;
wire   [5:0] indvar_next_fu_297_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [4:0] tmp_11_fu_303_p1;
reg   [4:0] tmp_11_reg_487;
reg   [4:0] ap_pipeline_reg_pp0_iter1_tmp_11_reg_487;
reg   [0:0] tmp_reg_492;
wire   [0:0] ap_CS_fsm_state12;
reg   [19:0] tmp_1_reg_497;
reg   [19:0] tmp_10_reg_502;
wire   [20:0] num_batches_fu_361_p3;
reg   [20:0] num_batches_reg_507;
wire   [0:0] ap_CS_fsm_state13;
wire   [19:0] i_fu_377_p2;
reg   [19:0] i_reg_515;
wire   [0:0] ap_CS_fsm_state14;
reg   [63:0] gmem_addr_1_reg_520;
wire   [0:0] tmp_7_fu_372_p2;
wire   [0:0] exitcond1_fu_406_p2;
reg   [0:0] ap_pipeline_reg_pp1_iter1_exitcond1_reg_526;
wire   [12:0] indvar_next1_fu_412_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [11:0] tmp_12_fu_418_p1;
reg   [11:0] tmp_12_reg_535;
reg   [11:0] ap_pipeline_reg_pp1_iter1_tmp_12_reg_535;
reg    ap_sig_ioackin_gmem_AWREADY;
reg    ap_block_state26_io;
wire   [12:0] k_fu_434_p2;
reg   [12:0] k_reg_544;
wire   [0:0] exitcond2_fu_440_p2;
wire   [0:0] ap_CS_fsm_pp2_stage0;
reg    ap_sig_ioackin_gmem_WREADY;
reg    ap_block_state30_io;
wire   [12:0] indvar_next2_fu_446_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [7:0] buf_0_q0;
reg   [7:0] buf_0_load_reg_563;
reg    ap_enable_reg_pp2_iter1;
wire   [0:0] ap_CS_fsm_state8;
reg    ap_enable_reg_pp0_iter2;
wire   [0:0] ap_CS_fsm_state21;
reg    ap_enable_reg_pp1_iter2;
reg   [4:0] local_key_0_address0;
reg    local_key_0_ce0;
reg    local_key_0_we0;
wire   [7:0] local_key_0_q0;
reg   [11:0] buf_0_address0;
reg    buf_0_ce0;
reg    buf_0_we0;
reg   [7:0] buf_0_d0;
reg    buf_0_ce1;
reg    buf_0_we1;
wire   [7:0] buf_0_q1;
wire    grp_aes256_encrypt_ecb_fu_269_ap_start;
wire    grp_aes256_encrypt_ecb_fu_269_ap_done;
wire    grp_aes256_encrypt_ecb_fu_269_ap_idle;
wire    grp_aes256_encrypt_ecb_fu_269_ap_ready;
wire   [4:0] grp_aes256_encrypt_ecb_fu_269_k_address0;
wire    grp_aes256_encrypt_ecb_fu_269_k_ce0;
wire   [11:0] grp_aes256_encrypt_ecb_fu_269_buf_r_address0;
wire    grp_aes256_encrypt_ecb_fu_269_buf_r_ce0;
wire    grp_aes256_encrypt_ecb_fu_269_buf_r_we0;
wire   [7:0] grp_aes256_encrypt_ecb_fu_269_buf_r_d0;
wire   [11:0] grp_aes256_encrypt_ecb_fu_269_buf_r_address1;
wire    grp_aes256_encrypt_ecb_fu_269_buf_r_ce1;
wire    grp_aes256_encrypt_ecb_fu_269_buf_r_we1;
wire   [7:0] grp_aes256_encrypt_ecb_fu_269_buf_r_d1;
reg   [19:0] i_1_reg_224;
reg   [12:0] k_i_reg_246;
wire   [0:0] ap_CS_fsm_state25;
wire   [0:0] ap_CS_fsm_state27;
reg    ap_reg_grp_aes256_encrypt_ecb_fu_269_ap_start;
wire   [63:0] tmp_4_fu_307_p1;
wire   [63:0] tmp_2_fu_422_p1;
wire   [63:0] tmp_8_fu_456_p1;
wire   [63:0] data4_sum_fu_395_p2;
reg    ap_reg_ioackin_gmem_ARREADY;
reg    ap_sig_ioackin_gmem_ARREADY;
reg    ap_reg_ioackin_gmem_AWREADY;
reg    ap_reg_ioackin_gmem_WREADY;
wire   [31:0] tmp_5_fu_311_p2;
wire   [31:0] p_neg_fu_324_p2;
wire   [20:0] p_lshr_cast_fu_349_p1;
wire   [20:0] p_neg_t_fu_352_p2;
wire   [20:0] p_lshr_f_cast_fu_358_p1;
wire   [20:0] i_1_cast_fu_368_p1;
wire   [31:0] tmp_9_fu_383_p3;
wire   [63:0] tmp_s_fu_391_p1;
wire   [11:0] tmp_14_fu_452_p1;
reg   [28:0] ap_NS_fsm;
reg    ap_enable_pp0;
reg    ap_enable_pp1;
reg    ap_enable_pp2;

// power-on initialization
initial begin
#0 ap_rst_n_inv = 1'b1;
#0 ap_CS_fsm = 29'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_reg_grp_aes256_encrypt_ecb_fu_269_ap_start = 1'b0;
#0 ap_reg_ioackin_gmem_ARREADY = 1'b0;
#0 ap_reg_ioackin_gmem_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem_WREADY = 1'b0;
end

workload_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
workload_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .key(key),
    .data(data),
    .size(size)
);

workload_gmem_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
workload_gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(gmem_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_addr_1_reg_520),
    .I_AWID(1'd0),
    .I_AWLEN(32'd4096),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(buf_0_load_reg_563),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd1),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

workload_local_key_0 #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
local_key_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(local_key_0_address0),
    .ce0(local_key_0_ce0),
    .we0(local_key_0_we0),
    .d0(reg_279),
    .q0(local_key_0_q0)
);

workload_buf_0 #(
    .DataWidth( 8 ),
    .AddressRange( 4096 ),
    .AddressWidth( 12 ))
buf_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buf_0_address0),
    .ce0(buf_0_ce0),
    .we0(buf_0_we0),
    .d0(buf_0_d0),
    .q0(buf_0_q0),
    .address1(grp_aes256_encrypt_ecb_fu_269_buf_r_address1),
    .ce1(buf_0_ce1),
    .we1(buf_0_we1),
    .d1(grp_aes256_encrypt_ecb_fu_269_buf_r_d1),
    .q1(buf_0_q1)
);

aes256_encrypt_ecb grp_aes256_encrypt_ecb_fu_269(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aes256_encrypt_ecb_fu_269_ap_start),
    .ap_done(grp_aes256_encrypt_ecb_fu_269_ap_done),
    .ap_idle(grp_aes256_encrypt_ecb_fu_269_ap_idle),
    .ap_ready(grp_aes256_encrypt_ecb_fu_269_ap_ready),
    .k_address0(grp_aes256_encrypt_ecb_fu_269_k_address0),
    .k_ce0(grp_aes256_encrypt_ecb_fu_269_k_ce0),
    .k_q0(local_key_0_q0),
    .buf_r_address0(grp_aes256_encrypt_ecb_fu_269_buf_r_address0),
    .buf_r_ce0(grp_aes256_encrypt_ecb_fu_269_buf_r_ce0),
    .buf_r_we0(grp_aes256_encrypt_ecb_fu_269_buf_r_we0),
    .buf_r_d0(grp_aes256_encrypt_ecb_fu_269_buf_r_d0),
    .buf_r_q0(buf_0_q0),
    .buf_r_address1(grp_aes256_encrypt_ecb_fu_269_buf_r_address1),
    .buf_r_ce1(grp_aes256_encrypt_ecb_fu_269_buf_r_ce1),
    .buf_r_we1(grp_aes256_encrypt_ecb_fu_269_buf_r_we1),
    .buf_r_d1(grp_aes256_encrypt_ecb_fu_269_buf_r_d1),
    .buf_r_q1(buf_0_q1),
    .sum(k_i_reg_246)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= 29'd1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'd1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state10)) & ~(1'd0 == exitcond5_fu_291_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'd1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'd1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state10)) & (1'd0 == exitcond5_fu_291_p2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if (((1'd1 == ap_CS_fsm_state8) | ((1'd1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state10)) & ~(1'd0 == exitcond5_fu_291_p2)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state10))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'd1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'd1 == ap_CS_fsm_pp1_stage0) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_block_state23)) & ~(1'd0 == exitcond1_fu_406_p2))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'd1 == ap_CS_fsm_state21)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'd1 == ap_CS_fsm_pp1_stage0) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_block_state23)) & (1'd0 == exitcond1_fu_406_p2))) begin
            ap_enable_reg_pp1_iter1 <= 1'b1;
        end else if (((1'd1 == ap_CS_fsm_state21) | ((1'd1 == ap_CS_fsm_pp1_stage0) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_block_state23)) & ~(1'd0 == exitcond1_fu_406_p2)))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_block_state23))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'd1 == ap_CS_fsm_state21)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'd1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b1 == ap_block_state30_io)) & ~(1'd0 == exitcond2_fu_440_p2))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((1'd1 == ap_CS_fsm_state26) & ~(1'd0 == tmp_13_fu_426_p3) & ~(1'b1 == ap_block_state26_io))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'd1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b1 == ap_block_state30_io)) & (1'd0 == exitcond2_fu_440_p2))) begin
            ap_enable_reg_pp2_iter1 <= 1'b1;
        end else if ((((1'd1 == ap_CS_fsm_state26) & ~(1'd0 == tmp_13_fu_426_p3) & ~(1'b1 == ap_block_state26_io)) | ((1'd1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b1 == ap_block_state30_io)) & ~(1'd0 == exitcond2_fu_440_p2)))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b1 == ap_block_state30_io))) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if (((1'd1 == ap_CS_fsm_state26) & ~(1'd0 == tmp_13_fu_426_p3) & ~(1'b1 == ap_block_state26_io))) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_aes256_encrypt_ecb_fu_269_ap_start <= 1'b0;
    end else begin
        if (((1'd1 == ap_CS_fsm_state26) & (1'd0 == tmp_13_fu_426_p3) & ~(1'b1 == ap_block_state26_io))) begin
            ap_reg_grp_aes256_encrypt_ecb_fu_269_ap_start <= 1'b1;
        end else if ((1'b1 == grp_aes256_encrypt_ecb_fu_269_ap_ready)) begin
            ap_reg_grp_aes256_encrypt_ecb_fu_269_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_ARREADY <= 1'b0;
    end else begin
        if ((((1'd1 == ap_CS_fsm_state2) & ~(1'b0 == ap_sig_ioackin_gmem_ARREADY)) | ((1'd1 == ap_CS_fsm_state15) & ~(1'b0 == ap_sig_ioackin_gmem_ARREADY)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b0;
        end else if ((((1'd1 == ap_CS_fsm_state2) & (1'b1 == gmem_ARREADY)) | ((1'd1 == ap_CS_fsm_state15) & (1'b1 == gmem_ARREADY)))) begin
            ap_reg_ioackin_gmem_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_AWREADY <= 1'b0;
    end else begin
        if (((1'd1 == ap_CS_fsm_state26) & ~(1'd0 == tmp_13_fu_426_p3))) begin
            if (~(1'b1 == ap_block_state26_io)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b0;
            end else if ((1'b1 == gmem_AWREADY)) begin
                ap_reg_ioackin_gmem_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_WREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_enable_reg_pp2_iter2) & (1'd0 == ap_pipeline_reg_pp2_iter1_exitcond2_reg_549))) begin
            if (~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b1 == ap_block_state30_io))) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b0;
            end else if ((1'b1 == gmem_WREADY)) begin
                ap_reg_ioackin_gmem_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state35) & ~(1'b0 == gmem_BVALID))) begin
        i_1_reg_224 <= i_reg_515;
    end else if ((1'd1 == ap_CS_fsm_state13)) begin
        i_1_reg_224 <= 20'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_pp1_stage0) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_block_state23)) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'd0 == exitcond1_fu_406_p2))) begin
        indvar1_reg_235 <= indvar_next1_fu_412_p2;
    end else if ((1'd1 == ap_CS_fsm_state21)) begin
        indvar1_reg_235 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b1 == ap_block_state30_io)) & (1'b1 == ap_enable_reg_pp2_iter0) & (1'd0 == exitcond2_fu_440_p2))) begin
        indvar2_reg_258 <= indvar_next2_fu_446_p2;
    end else if (((1'd1 == ap_CS_fsm_state26) & ~(1'd0 == tmp_13_fu_426_p3) & ~(1'b1 == ap_block_state26_io))) begin
        indvar2_reg_258 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state10)) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond5_fu_291_p2))) begin
        indvar_reg_213 <= indvar_next_fu_297_p2;
    end else if ((1'd1 == ap_CS_fsm_state8)) begin
        indvar_reg_213 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state27) & ~(1'b0 == grp_aes256_encrypt_ecb_fu_269_ap_done))) begin
        k_i_reg_246 <= k_reg_544;
    end else if ((1'd1 == ap_CS_fsm_state25)) begin
        k_i_reg_246 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state10)))) begin
        ap_pipeline_reg_pp0_iter1_exitcond5_reg_478 <= exitcond5_reg_478;
        ap_pipeline_reg_pp0_iter1_tmp_11_reg_487 <= tmp_11_reg_487;
        exitcond5_reg_478 <= exitcond5_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_pp1_stage0) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_block_state23)))) begin
        ap_pipeline_reg_pp1_iter1_exitcond1_reg_526 <= exitcond1_reg_526;
        ap_pipeline_reg_pp1_iter1_tmp_12_reg_535 <= tmp_12_reg_535;
        exitcond1_reg_526 <= exitcond1_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b1 == ap_block_state30_io)))) begin
        ap_pipeline_reg_pp2_iter1_exitcond2_reg_549 <= exitcond2_reg_549;
        exitcond2_reg_549 <= exitcond2_fu_440_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b1 == ap_block_state30_io)) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'd0 == exitcond2_reg_549))) begin
        buf_0_load_reg_563 <= buf_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'd1) & ~(1'b0 == ap_start))) begin
        data_read_reg_467 <= data;
        gmem_addr_reg_472 <= key;
        size_read_reg_461 <= size;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state14) & ~(1'd0 == tmp_7_fu_372_p2))) begin
        gmem_addr_1_reg_520 <= data4_sum_fu_395_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state14)) begin
        i_reg_515 <= i_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_state26) & (1'd0 == tmp_13_fu_426_p3) & ~(1'b1 == ap_block_state26_io))) begin
        k_reg_544 <= k_fu_434_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state13)) begin
        num_batches_reg_507 <= num_batches_fu_361_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'd1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond5_reg_478 == 1'd0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state10))) | ((1'd1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'd0 == exitcond1_reg_526) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_block_state23))))) begin
        reg_279 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'd1 == ap_CS_fsm_state12)) begin
        tmp_10_reg_502 <= {{tmp_5_fu_311_p2[31:12]}};
        tmp_1_reg_497 <= {{p_neg_fu_324_p2[31:12]}};
        tmp_reg_492 <= tmp_5_fu_311_p2[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state10)) & (1'd0 == exitcond5_fu_291_p2))) begin
        tmp_11_reg_487 <= tmp_11_fu_303_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == ap_CS_fsm_pp1_stage0) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_block_state23)) & (1'd0 == exitcond1_fu_406_p2))) begin
        tmp_12_reg_535 <= tmp_12_fu_418_p1;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_state14) & (1'd0 == tmp_7_fu_372_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'd1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_state14) & (1'd0 == tmp_7_fu_372_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_ARREADY)) begin
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_AWREADY)) begin
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY;
    end else begin
        ap_sig_ioackin_gmem_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_WREADY)) begin
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY;
    end else begin
        ap_sig_ioackin_gmem_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter0))) begin
        buf_0_address0 = tmp_8_fu_456_p1;
    end else if ((1'b1 == ap_enable_reg_pp1_iter2)) begin
        buf_0_address0 = tmp_2_fu_422_p1;
    end else if ((1'd1 == ap_CS_fsm_state27)) begin
        buf_0_address0 = grp_aes256_encrypt_ecb_fu_269_buf_r_address0;
    end else begin
        buf_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b1 == ap_block_state30_io)) & (1'b1 == ap_enable_reg_pp2_iter0)) | (~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_block_state23)) & (1'b1 == ap_enable_reg_pp1_iter2)))) begin
        buf_0_ce0 = 1'b1;
    end else if ((1'd1 == ap_CS_fsm_state27)) begin
        buf_0_ce0 = grp_aes256_encrypt_ecb_fu_269_buf_r_ce0;
    end else begin
        buf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == ap_CS_fsm_state27)) begin
        buf_0_ce1 = grp_aes256_encrypt_ecb_fu_269_buf_r_ce1;
    end else begin
        buf_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp1_iter2)) begin
        buf_0_d0 = reg_279;
    end else if ((1'd1 == ap_CS_fsm_state27)) begin
        buf_0_d0 = grp_aes256_encrypt_ecb_fu_269_buf_r_d0;
    end else begin
        buf_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_block_state23)) & (1'b1 == ap_enable_reg_pp1_iter2) & (1'd0 == ap_pipeline_reg_pp1_iter1_exitcond1_reg_526))) begin
        buf_0_we0 = 1'b1;
    end else if ((1'd1 == ap_CS_fsm_state27)) begin
        buf_0_we0 = grp_aes256_encrypt_ecb_fu_269_buf_r_we0;
    end else begin
        buf_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'd1 == ap_CS_fsm_state27)) begin
        buf_0_we1 = grp_aes256_encrypt_ecb_fu_269_buf_r_we1;
    end else begin
        buf_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_ARREADY)) begin
        if ((1'd1 == ap_CS_fsm_state15)) begin
            gmem_ARADDR = gmem_addr_1_reg_520;
        end else if ((1'd1 == ap_CS_fsm_state2)) begin
            gmem_ARADDR = gmem_addr_reg_472;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_gmem_ARREADY)) begin
        if ((1'd1 == ap_CS_fsm_state15)) begin
            gmem_ARLEN = 32'd4096;
        end else if ((1'd1 == ap_CS_fsm_state2)) begin
            gmem_ARLEN = 32'd32;
        end else begin
            gmem_ARLEN = 'bx;
        end
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'd1 == ap_CS_fsm_state2) & (1'b0 == ap_reg_ioackin_gmem_ARREADY)) | ((1'd1 == ap_CS_fsm_state15) & (1'b0 == ap_reg_ioackin_gmem_ARREADY)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_state26) & ~(1'd0 == tmp_13_fu_426_p3) & (1'b0 == ap_reg_ioackin_gmem_AWREADY))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_state35) & ~(1'b0 == gmem_BVALID))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'd1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond5_reg_478 == 1'd0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state10))) | ((1'd1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'd0 == exitcond1_reg_526) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_block_state23))))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp2_iter2) & (1'd0 == ap_pipeline_reg_pp2_iter1_exitcond2_reg_549) & (1'b0 == ap_reg_ioackin_gmem_WREADY))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_state2) | (1'd1 == ap_CS_fsm_state15))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == ap_CS_fsm_state26) & ~(1'd0 == tmp_13_fu_426_p3))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'd1 == ap_CS_fsm_state35)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'd1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond5_reg_478 == 1'd0)) | ((1'd1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'd0 == exitcond1_reg_526)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp2_iter2) & (1'd0 == ap_pipeline_reg_pp2_iter1_exitcond2_reg_549))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter2)) begin
        local_key_0_address0 = tmp_4_fu_307_p1;
    end else if ((1'd1 == ap_CS_fsm_state27)) begin
        local_key_0_address0 = grp_aes256_encrypt_ecb_fu_269_k_address0;
    end else begin
        local_key_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state10)) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        local_key_0_ce0 = 1'b1;
    end else if ((1'd1 == ap_CS_fsm_state27)) begin
        local_key_0_ce0 = grp_aes256_encrypt_ecb_fu_269_k_ce0;
    end else begin
        local_key_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state10)) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'd0 == ap_pipeline_reg_pp0_iter1_exitcond5_reg_478))) begin
        local_key_0_we0 = 1'b1;
    end else begin
        local_key_0_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        29'd1 : begin
            if (~(1'b0 == ap_start)) begin
                ap_NS_fsm = 29'd2;
            end else begin
                ap_NS_fsm = 29'd1;
            end
        end
        29'd2 : begin
            if (~(1'b0 == ap_sig_ioackin_gmem_ARREADY)) begin
                ap_NS_fsm = 29'd4;
            end else begin
                ap_NS_fsm = 29'd2;
            end
        end
        29'd4 : begin
            ap_NS_fsm = 29'd8;
        end
        29'd8 : begin
            ap_NS_fsm = 29'd16;
        end
        29'd16 : begin
            ap_NS_fsm = 29'd32;
        end
        29'd32 : begin
            ap_NS_fsm = 29'd64;
        end
        29'd64 : begin
            ap_NS_fsm = 29'd128;
        end
        29'd128 : begin
            ap_NS_fsm = 29'd256;
        end
        29'd256 : begin
            if ((~(~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state10)) & (1'b1 == ap_enable_reg_pp0_iter2) & ~(1'b1 == ap_enable_reg_pp0_iter1)) & ~(~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state10)) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'd0 == exitcond5_fu_291_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = 29'd256;
            end else if (((~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state10)) & (1'b1 == ap_enable_reg_pp0_iter2) & ~(1'b1 == ap_enable_reg_pp0_iter1)) | (~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state10)) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'd0 == exitcond5_fu_291_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = 29'd512;
            end else begin
                ap_NS_fsm = 29'd256;
            end
        end
        29'd512 : begin
            ap_NS_fsm = 29'd1024;
        end
        29'd1024 : begin
            ap_NS_fsm = 29'd2048;
        end
        29'd2048 : begin
            if ((1'd0 == tmp_7_fu_372_p2)) begin
                ap_NS_fsm = 29'd1;
            end else begin
                ap_NS_fsm = 29'd4096;
            end
        end
        29'd4096 : begin
            if (~(1'b0 == ap_sig_ioackin_gmem_ARREADY)) begin
                ap_NS_fsm = 29'd8192;
            end else begin
                ap_NS_fsm = 29'd4096;
            end
        end
        29'd8192 : begin
            ap_NS_fsm = 29'd16384;
        end
        29'd16384 : begin
            ap_NS_fsm = 29'd32768;
        end
        29'd32768 : begin
            ap_NS_fsm = 29'd65536;
        end
        29'd65536 : begin
            ap_NS_fsm = 29'd131072;
        end
        29'd131072 : begin
            ap_NS_fsm = 29'd262144;
        end
        29'd262144 : begin
            ap_NS_fsm = 29'd524288;
        end
        29'd524288 : begin
            if ((~(~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_block_state23)) & (1'b1 == ap_enable_reg_pp1_iter2) & ~(1'b1 == ap_enable_reg_pp1_iter1)) & ~(~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_block_state23)) & (1'b1 == ap_enable_reg_pp1_iter0) & ~(1'd0 == exitcond1_fu_406_p2) & ~(1'b1 == ap_enable_reg_pp1_iter1)))) begin
                ap_NS_fsm = 29'd524288;
            end else if (((~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_block_state23)) & (1'b1 == ap_enable_reg_pp1_iter2) & ~(1'b1 == ap_enable_reg_pp1_iter1)) | (~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_block_state23)) & (1'b1 == ap_enable_reg_pp1_iter0) & ~(1'd0 == exitcond1_fu_406_p2) & ~(1'b1 == ap_enable_reg_pp1_iter1)))) begin
                ap_NS_fsm = 29'd1048576;
            end else begin
                ap_NS_fsm = 29'd524288;
            end
        end
        29'd1048576 : begin
            ap_NS_fsm = 29'd2097152;
        end
        29'd2097152 : begin
            if ((~(1'd0 == tmp_13_fu_426_p3) & ~(1'b1 == ap_block_state26_io))) begin
                ap_NS_fsm = 29'd8388608;
            end else if (((1'd0 == tmp_13_fu_426_p3) & ~(1'b1 == ap_block_state26_io))) begin
                ap_NS_fsm = 29'd4194304;
            end else begin
                ap_NS_fsm = 29'd2097152;
            end
        end
        29'd4194304 : begin
            if (~(1'b0 == grp_aes256_encrypt_ecb_fu_269_ap_done)) begin
                ap_NS_fsm = 29'd2097152;
            end else begin
                ap_NS_fsm = 29'd4194304;
            end
        end
        29'd8388608 : begin
            if ((~((1'b1 == ap_enable_reg_pp2_iter2) & ~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b1 == ap_block_state30_io)) & ~(1'b1 == ap_enable_reg_pp2_iter1)) & ~(~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b1 == ap_block_state30_io)) & (1'b1 == ap_enable_reg_pp2_iter0) & ~(1'd0 == exitcond2_fu_440_p2) & ~(1'b1 == ap_enable_reg_pp2_iter1)))) begin
                ap_NS_fsm = 29'd8388608;
            end else if ((((1'b1 == ap_enable_reg_pp2_iter2) & ~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b1 == ap_block_state30_io)) & ~(1'b1 == ap_enable_reg_pp2_iter1)) | (~((1'b1 == ap_enable_reg_pp2_iter2) & (1'b1 == ap_block_state30_io)) & (1'b1 == ap_enable_reg_pp2_iter0) & ~(1'd0 == exitcond2_fu_440_p2) & ~(1'b1 == ap_enable_reg_pp2_iter1)))) begin
                ap_NS_fsm = 29'd16777216;
            end else begin
                ap_NS_fsm = 29'd8388608;
            end
        end
        29'd16777216 : begin
            ap_NS_fsm = 29'd33554432;
        end
        29'd33554432 : begin
            ap_NS_fsm = 29'd67108864;
        end
        29'd67108864 : begin
            ap_NS_fsm = 29'd134217728;
        end
        29'd134217728 : begin
            ap_NS_fsm = 29'd268435456;
        end
        29'd268435456 : begin
            if (~(1'b0 == gmem_BVALID)) begin
                ap_NS_fsm = 29'd2048;
            end else begin
                ap_NS_fsm = 29'd268435456;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state10 = ((exitcond5_reg_478 == 1'd0) & (1'b0 == gmem_RVALID));
end

always @ (*) begin
    ap_block_state23 = ((1'd0 == exitcond1_reg_526) & (1'b0 == gmem_RVALID));
end

always @ (*) begin
    ap_block_state26_io = (~(1'd0 == tmp_13_fu_426_p3) & (1'b0 == ap_sig_ioackin_gmem_AWREADY));
end

always @ (*) begin
    ap_block_state30_io = ((1'd0 == ap_pipeline_reg_pp2_iter1_exitcond2_reg_549) & (1'b0 == ap_sig_ioackin_gmem_WREADY));
end

always @ (*) begin
    ap_enable_pp0 = ((ap_enable_reg_pp0_iter0 == 1'b1) | (ap_enable_reg_pp0_iter1 == 1'b1) | (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_enable_pp1 = ((ap_enable_reg_pp1_iter0 == 1'b1) | (ap_enable_reg_pp1_iter1 == 1'b1) | (ap_enable_reg_pp1_iter2 == 1'b1));
end

always @ (*) begin
    ap_enable_pp2 = ((ap_enable_reg_pp2_iter0 == 1'b1) | (ap_enable_reg_pp2_iter1 == 1'b1) | (ap_enable_reg_pp2_iter2 == 1'b1));
end

assign data4_sum_fu_395_p2 = (tmp_s_fu_391_p1 + data_read_reg_467);

assign exitcond1_fu_406_p2 = ((indvar1_reg_235 == 13'd4096) ? 1'b1 : 1'b0);

assign exitcond2_fu_440_p2 = ((indvar2_reg_258 == 13'd4096) ? 1'b1 : 1'b0);

assign exitcond5_fu_291_p2 = ((indvar_reg_213 == 6'd32) ? 1'b1 : 1'b0);

assign grp_aes256_encrypt_ecb_fu_269_ap_start = ap_reg_grp_aes256_encrypt_ecb_fu_269_ap_start;

assign i_1_cast_fu_368_p1 = i_1_reg_224;

assign i_fu_377_p2 = (i_1_reg_224 + 20'd1);

assign indvar_next1_fu_412_p2 = (indvar1_reg_235 + 13'd1);

assign indvar_next2_fu_446_p2 = (indvar2_reg_258 + 13'd1);

assign indvar_next_fu_297_p2 = (indvar_reg_213 + 6'd1);

assign k_fu_434_p2 = (k_i_reg_246 + 13'd16);

assign num_batches_fu_361_p3 = ((tmp_reg_492[0:0] === 1'b1) ? p_neg_t_fu_352_p2 : p_lshr_f_cast_fu_358_p1);

assign p_lshr_cast_fu_349_p1 = tmp_1_reg_497;

assign p_lshr_f_cast_fu_358_p1 = tmp_10_reg_502;

assign p_neg_fu_324_p2 = ($signed(32'd4294963201) - $signed(size_read_reg_461));

assign p_neg_t_fu_352_p2 = (21'd0 - p_lshr_cast_fu_349_p1);

assign tmp_11_fu_303_p1 = indvar_reg_213[4:0];

assign tmp_12_fu_418_p1 = indvar1_reg_235[11:0];

assign tmp_13_fu_426_p3 = k_i_reg_246[32'd12];

assign tmp_14_fu_452_p1 = indvar2_reg_258[11:0];

assign tmp_2_fu_422_p1 = ap_pipeline_reg_pp1_iter1_tmp_12_reg_535;

assign tmp_4_fu_307_p1 = ap_pipeline_reg_pp0_iter1_tmp_11_reg_487;

assign tmp_5_fu_311_p2 = (size_read_reg_461 + 32'd4095);

assign tmp_7_fu_372_p2 = (($signed(i_1_cast_fu_368_p1) < $signed(num_batches_reg_507)) ? 1'b1 : 1'b0);

assign tmp_8_fu_456_p1 = tmp_14_fu_452_p1;

assign tmp_9_fu_383_p3 = {{i_1_reg_224}, {12'd0}};

assign tmp_s_fu_391_p1 = tmp_9_fu_383_p3;

endmodule //workload
